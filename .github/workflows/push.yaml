name: Latest Test on Push

# Controls when the action will run. 
on:
  # Triggers the workflow on push event but only for the mvp_demo branch
  push:
    branches: [ mvp_demo ]
    paths-ignore:
      - 'docs/**'
      - 'design/**'
      - 'examples/**'
      - 'extensions/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  # This workflow contains three jobs called "build job" , "deploy autotune" and "deploy crc"
  build_job:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - name: Build monitoring
        run: |
          echo Build monitoring
          ./build.sh -i autotune_operator:test -o autotune_optuna:test
          docker images | grep autotune
      - name: docker login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Docker Push
        run: |
          docker tag autotune_operator:test chandra25ms/autotune_operator:test
          docker push chandra25ms/autotune_operator:test

  deploy_autotune:
    # The type of runner that the job will run on
    needs: build_job
    runs-on: ubuntu-20.04

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
         repository: kruize/autotune
         ref: mvp_demo
         path: autotune
      - name: Setup Minikube
        uses: manusa/actions-setup-minikube@v2.3.0
        with:
          minikube version: 'v1.16.0'
          kubernetes version: 'v1.19.2'
      - name: Display cluster info
        run: |
          kubectl cluster-info
          kubectl get pods -n kube-system
      - name: Install Prometheus on minikube
        run: |
          echo Install Prometheus on minikube  
          cd autotune/scripts
          ./prometheus_on_minikube.sh -as    
      - name: Deploy autotune
        run: |
          echo Deploy autotune
          cd autotune
          ./deploy.sh -c minikube -i chandra25ms/autotune_operator:test      
          sleep 20
          autotune_pod=$(kubectl get pod -n monitoring | grep autotune | cut -d " " -f1)
          kubectl logs $autotune_pod -n monitoring -c autotune > ${GITHUB_WORKSPACE}/kruize_pod_log.txt 2>&1
      - name: Archive results
        if: always()
        run: |
          cd ${GITHUB_WORKSPACE}
          tar cvf autotune_results.tar kruize_pod_log.txt

      - name: Upload results
        if: always()
        uses: actions/upload-artifact@v3
        with:
           name: autotune-results
           path: ./autotune_results.tar
           retention-days: 2

  deploy_crc:
    # The type of runner that the job will run on
    needs: build_job
    runs-on: ubuntu-20.04

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
         repository: kruize/autotune
         ref: mvp_demo
         path: autotune
      - name: Setup Minikube
        uses: manusa/actions-setup-minikube@v2.3.0
        with:
          minikube version: 'v1.16.0'
          kubernetes version: 'v1.19.2'
      - name: Display cluster info
        run: |
          kubectl cluster-info
          kubectl get pods -n kube-system
      - name: Install Prometheus on minikube
        run: |
          echo Install Prometheus on minikube  
          cd autotune/scripts
          ./prometheus_on_minikube.sh -as
      - name: Deploy crc
        run: |
          echo Deploy crc
          cd autotune
          echo "***************************************************************"
          cp ./manifests/crc/kruize-crc-minikube.yaml ./manifests/crc/kruize-crc-minikube.yaml.old
          sed -e "s/image: \"kruize\/autotune_operator:0.0.8_mvp\"/image: \"chandra25ms/autotune_operator:test\"/g" ./manifests/crc/kruize-crc-minikube.yaml.old > ./manifests/crc/kruize-crc-minikube.yaml
          sed -i "s/imagePullPolicy: Always/imagePullPolicy: IfNotPresent/g" ./manifests/crc/kruize-crc-minikube.yaml
          cat ./manifests/crc/kruize-crc-minikube.yaml
          kubectl apply -f ./manifests/crc/kruize-crc-minikube.yaml
          sleep 20
          autotune_pod=$(kubectl get pod -n monitoring | grep kruize | cut -d " " -f1)
          kubectl logs $autotune_pod -n monitoring > ${GITHUB_WORKSPACE}/kruize_pod_log.txt 2>&1
      - name: Archive results
        if: always()
        run: |
          cd ${GITHUB_WORKSPACE}
          tar cvf crc_results.tar kruize_pod_log.txt

      - name: Upload results
        if: always()
        uses: actions/upload-artifact@v3
        with:
           name: crc-results
           path: ./crc_results.tar
