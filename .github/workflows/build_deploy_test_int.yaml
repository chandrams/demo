name: Build-Test-autotune-integration

# Controls when the action will run. 
on:
  pull_request:
    paths-ignore:
      - 'docs/**'
      - 'design/**'
      - 'examples/**'
      - 'extensions/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout autotune
        uses: actions/checkout@v2
        with:
          repository: kruize/autotune
          ref: integration-channel-RM-EM
          path: autotune

      - name: Build autotune
        run: |
          echo Build autotune
          cd autotune
          ./build.sh -t autotune:int-test
          docker images | grep autotune   
          
      - name: docker login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker Push
        run: |
          docker tag autotune:int-test kruize/autotune:int-test
          docker push kruize/autotune:int-test
  
  hpo:
    name: HPO Tests    
    needs: build
    # The type of runner that the job will run on
    runs-on: ubuntu-latest          
    steps:
    
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v1
      - name: Autotune Test setup
        uses: ./.github/actions/test-setup
        with:
         branch: "master"
      - name: Run HPO tests
        run: |
          echo Running HPO API tests
          cd autotune/tests
          ./scripts/hpo/start_hpo_servers.sh -t
          ./test_autotune.sh -c minikube -i kruize/autotune:int-test --tctype=functional --testsuite=hpo_api_tests --resultsdir=${GITHUB_WORKSPACE} -r ${GITHUB_WORKSPACE}/benchmarks -t
          ./test_autotune.sh -c minikube -i kruize/autotune:int-test --tctype=functional --testsuite=hpo_api_tests --resultsdir=${GITHUB_WORKSPACE} -r ${GITHUB_WORKSPACE}/benchmarks
          
      - name: Archive results
        if: always()
        run: |
          cd ${GITHUB_WORKSPACE}
          ls
          tar cvf hpo.tar autotune_test_results
          ls
          
      - name: Upload results
        if: always()
        uses: actions/upload-artifact@v2
        with:
           name: autotune-results
           path: ./hpo.tar
           retention-days: 2

     
  analyzer_api_tests:
    name: Analyzer API Test  
    needs: build
    # The type of runner that the job will run on
    runs-on: ubuntu-latest 
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v1
      - name: Autotune Test setup
        uses: ./.github/actions/test-setup
      - name: Run Analyzer API tests
        run: |
          echo Running Analyzer API tests
          cd autotune/tests
          ./test_autotune.sh -c minikube -i kruize/autotune:int-test --tctype=functional --testsuite=basic_api_tests --resultsdir=${GITHUB_WORKSPACE} -r ${GITHUB_WORKSPACE}/benchmarks    
      - name: Archive results
        if: always()
        run: |
          cd ${GITHUB_WORKSPACE}
          ls
          tar cvf analyzer_api.tar autotune_test_results
          ls
          
      - name: Upload results
        if: always()
        uses: actions/upload-artifact@v2
        with:
           name: autotune-results
           path: ./analyzer_api.tar
           retention-days: 2

          
  autotune_yaml_tests:
    name: Autotune YAML Test    
    needs: build
    # The type of runner that the job will run on
    runs-on: ubuntu-latest 
    steps:    
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v1
      - name: Autotune Test setup
        uses: ./.github/actions/test-setup
      - name: Run Autotune YAML tests
        run: |
          echo Running Autotune YAML tests
          cd autotune/tests
          ./test_autotune.sh -c minikube -i kruize/autotune:int-test --tctype=functional --testsuite=app_autotune_yaml_tests --resultsdir=${GITHUB_WORKSPACE} -r ${GITHUB_WORKSPACE}/benchmarks    
      - name: Archive results
        if: always()
        run: |
          cd ${GITHUB_WORKSPACE}
          ls
          tar cvf autotune_yaml.tar autotune_test_results
          ls
          
      - name: Upload results
        if: always()
        uses: actions/upload-artifact@v2
        with:
           name: autotune-results
           path: ./autotune_yaml.tar
           retention-days: 2

          
  autotune_config_yaml_tests:
    name: Autotune Config YAML Test 
    needs: build
    # The type of runner that the job will run on
    runs-on: ubuntu-latest 
    steps:    
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v1
      - name: Autotune Test setup
        uses: ./.github/actions/test-setup
      - name: Run Autotune Config YAML tests
        run: |
          echo Running Autotune Config YAML tests
          cd autotune/tests
          ./test_autotune.sh -c minikube -i kruize/autotune:int-test --tctype=functional --testsuite=autotune_config_yaml_tests --resultsdir=${GITHUB_WORKSPACE} -r ${GITHUB_WORKSPACE}/benchmarks 
      - name: Archive results
        if: always()
        run: |
          cd ${GITHUB_WORKSPACE}
          ls
          tar cvf autotune_config_yaml.tar autotune_test_results
          ls
          
      - name: Upload results
        if: always()
        uses: actions/upload-artifact@v2
        with:
           name: autotune-results
           path: ./autotune_config_yaml.tar
           retention-days: 2

        
          
  configmap_tests:
    name: Config map Test  
    needs: build
    # The type of runner that the job will run on
    runs-on: ubuntu-latest 
    steps:    
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v1
      - name: Autotune Test setup
        uses: ./.github/actions/test-setup  
      # The type of runner that the job will run on
          
      - name: Run Autotune Config map tests
        run: |
          echo Running Autotune Config map tests
          cd autotune/tests
          ./test_autotune.sh -c minikube -i kruize/autotune:int-test --tctype=functional --testsuite=configmap_yaml_tests --resultsdir=${GITHUB_WORKSPACE} -r ${GITHUB_WORKSPACE}/benchmarks    

      - name: Archive results
        if: always()
        run: |
          cd ${GITHUB_WORKSPACE}
          ls
          tar cvf config_map.tar autotune_test_results
          ls
          
      - name: Upload results
        if: always()
        uses: actions/upload-artifact@v2
        with:
           name: autotune-results
           path: ./config_map.tar
           retention-days: 2

  
        
  autotune_id_tests:
    name: Autotune ID tests    
    needs: build
    # The type of runner that the job will run on
    runs-on: ubuntu-latest 
    steps:    
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v1
      - name: Autotune Test setup
        uses: ./.github/actions/test-setup  
      # The type of runner that the job will run on
          
      - name: Run Autotune ID tests
        run: |
          echo Running Autotune ID tests
          cd autotune/tests
          ./test_autotune.sh -c minikube -i kruize/autotune:int-test --tctype=functional --testsuite=autotune_id_tests --resultsdir=${GITHUB_WORKSPACE} -r ${GITHUB_WORKSPACE}/benchmarks    
      
      - name: Archive results
        if: always()
        run: |
          cd ${GITHUB_WORKSPACE}
          ls
          tar cvf autotune_id.tar autotune_test_results
          ls
          
      - name: Upload results
        if: always()
        uses: actions/upload-artifact@v2
        with:
           name: autotune-results
           path: ./autotune_id.tar
           retention-days: 2

        
  modify_autotune_config_tests:
    name: Modify autotune config tests   
    needs: build
    # The type of runner that the job will run on
    runs-on: ubuntu-latest 
    steps:    
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v1
      - name: Autotune Test setup
        uses: ./.github/actions/test-setup  
      
          
      - name: Run modify autotune config tests
        run: |
          echo Running modify autotune config tests
          cd autotune/tests
          ./test_autotune.sh -c minikube -i kruize/autotune:int-test --tctype=functional --testsuite=modify_autotune_config_tests --resultsdir=${GITHUB_WORKSPACE} -r ${GITHUB_WORKSPACE}/benchmarks    

      - name: Archive results
        if: always()
        run: |
          cd ${GITHUB_WORKSPACE}
          ls
          tar cvf modify_autotune.tar autotune_test_results
          ls
          
      - name: Upload results
        if: always()
        uses: actions/upload-artifact@v2
        with:
           name: autotune-results
           path: ./modify_autotune.tar
           retention-days: 2
